@model CallingCRM.Models.RegisterViewModel
@{
    ViewBag.Title = "Become a Community Member";
    Layout = "~/Views/Shared/_LayoutLogin.cshtml";
}

<h4>Become a Community Member</h4>
<h6 class="text-info">* fields are mandatory.</h6>
<div class='text-success'>@Html.Raw(ViewBag.sMessage)</div>
<div class='text-danger'>@Html.Raw(ViewBag.eMessage)</div>

@using (Html.BeginForm("Register", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form", action = "/Home/Register" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "text-info" })

<div class="row">
    <input type="hidden" name="Step" value="@ViewBag.Step" />
    @if (ViewBag.Step >= 1)
    {
        <div class="form-group col-md-12">
            <label class="control-label">Enter Sponsor's Username</label>
            @Html.HiddenFor(m => m.SponsorId, new { @Value = ViewBag.SponsorId })
            @Html.TextBoxFor(m => m.SponsorDisplay, new { @class = "form-control", required = "required", @Value = ViewBag.SponsorDisplay })
        </div>
    }
    @if (ViewBag.Step >= 2)
    {
        <div class="form-group col-md-12">
            <label class="control-label">Enter Parent's Username</label>
            @Html.HiddenFor(m => m.ParentId, new { @Value = Model.ParentId })
            @Html.TextBoxFor(m => m.ParentDisplay, new { @class = "form-control", required = "required", @Value = Model.ParentDisplay })
        </div>
    }
    @if (ViewBag.Step >= 3)
    {
        <div class="form-group col-md-12">
            <label class="control-label">Allocated Leg Position</label>
            @Html.HiddenFor(m => m.Position, new { @Value = Model.Position })
            @Html.TextBoxFor(m => m.PositionDisplay, new { @class = "form-control", required = "required", @readonly = "readonly", @Value = Model.PositionDisplay })
        </div>
    }
    @if (ViewBag.Step >= 4)
    {
        <div class="form-group col-md-12">
            <label class="control-label">Chose Your Username</label>
            @Html.TextBoxFor(m => m.Username, new { @class = "form-control", required = "required", pattern = "^[a-zA-Z0-9_]{3,20}$", title = "Three or more characters required." })
            <div id="userstatus" style="font-size: 14px;"></div>
        </div>
    }
    @if (ViewBag.Step >= 5)
    {
        <div class="form-group col-md-12">
            <em>You can not change sponsor, parent and username added here. So, make double sure that inormation provided above is correct.</em>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.FullName, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", pattern = "^[a-zA-Z\\s]+$", title = "Please enter only alphabets." })
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.Email, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email", required = "required" })
        </div>

        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.Mobile, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Mobile, new { @class = "form-control", type = "tel", pattern = "^\\d{10}$", title = "Please enter 10 digits mobile number." })
            <span id="valid-msg" class="hide" style="display: none">✓ Valid</span>
            <span id="error-msg" class="hide" style="display: none">invalid</span>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.ZipCode, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.ZipCode, new { @class = "form-control" })
        </div>

        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.Password, new { @class = "control-label" })
            @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "required", pattern = ".{6,}", title = "Six or more characters required." })
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label" })
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", required = "required", pattern = ".{6,}", title = "Six or more characters required." })
        </div>
        <div class="form-group col-md-12">
            Password hint:  
            <ul>
                <li>Minimum 6 characters.</li>
                <li>Must have 1 number (0 to 9).</li>
                <li>Must have 1 alphabet (a to z).</li>
                <li>Must have 1 capital letter (A to Z).</li>
                <li>Must have 1 symbol (! @@ # $ % ^ &amp; * - _).</li>
            </ul>
            Make sure you have note down or memorised your password.
        </div>
    }


    @if (ViewBag.Step == 5)
    {
        <div class="form-group col-md-12">
            <input type="button" class="btn btn-warning text-dark" value="Back" onclick="window.history.back();" />
            <input type="submit" class="btn btn-primary" value="Create Account" />
        </div>
    }
    else
    {
        <div class="form-group col-md-12">
            <input type="button" class="btn btn-warning text-dark" value="Back" onclick="window.history.back();" />
            <input type="submit" class="btn btn-primary" value="Continue" />
        </div>
    }


    @*<input type="hidden" name="CurrentEmail" id="CurrentEmail" value="@ViewBag.userid" />
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.SponsorId, new { @class = "control-label" })
            @Html.HiddenFor(m => m.SponsorId, new { @Value = ViewBag.Sponsor })
            @Html.TextBoxFor(m => m.SponsorDisplay, new { @class = "form-control", required = "required", @Value = ViewBag.SponsorDisplay })
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.ParentId, new { @class = "control-label" })
            @Html.HiddenFor(m => m.ParentId, new { @Value = ViewBag.Parent })
            @Html.TextBoxFor(m => m.ParentDisplay, new { @class = "form-control", required = "required", disabled = "disabled", @Value = ViewBag.ParentDisplay })
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.Position, new { @class = "control-label" })
            @Html.HiddenFor(m => m.Position, new { @Value = ViewBag.Position })
            @Html.TextBoxFor(m => m.PositionDisplay, new { @class = "form-control", required = "required", disabled = "disabled", @Value = ViewBag.PositionDisplay })
        </div>

        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.FullName, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", pattern = "^[a-zA-Z\\s]+$", title = "Please enter only alphabets." })
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.Email, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email", required = "required" })
        </div>

        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.Mobile, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Mobile, new { @class = "form-control", type = "tel", pattern = "^\\d{10}$", title = "Please enter 10 digits mobile number." })
            <span id="valid-msg" class="hide">✓ Valid</span>
            <span id="error-msg" class="hide"></span>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.ZipCode, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.ZipCode, new { @class = "form-control" })
        </div>

        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.Username, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Username, new { @class = "form-control", required = "required", pattern = "^[a-zA-Z0-9_]{3,20}$", title = "Three or more characters required." })
            <div id="userstatus" style="font-size: 14px;"></div>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.Password, new { @class = "control-label" })
            @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "required", pattern = ".{6,}", title = "Six or more characters required." })
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label" })
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", required = "required", pattern = ".{6,}", title = "Six or more characters required." })
        </div>
        <div class="form-group col-md-12">
            <input type="submit" class="btn btn-primary" value="Add Member" />
        </div>
    *@
</div>
}

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="~/assets/js/intlTelInput.js"></script>
<script>
    $( document ).ready(function() {
        var SponsorNoEdit = "@ViewBag.SponsorNoEdit";
        if (SponsorNoEdit != "") {
            $("#SponsorDisplay").attr("readonly", true);
            $("#SponsorDisplay").prop("readonly", true);
        }

        var ParentNoEdit = "@ViewBag.ParentNoEdit";
        if (ParentNoEdit != "") {
            $("#ParentDisplay").attr("readonly", true);
            $("#ParentDisplay").prop("readonly", true);
        }
    });

    $("#Username").focusout(function () {
        $.ajax({
            url: "/Home/CheckUserName/" + $("#Username").val(), success: function (result) {
                $("#userstatus").html(result);
            }
        });
    });

    var input = document.querySelector("#Mobile"),
        errorMsg = document.querySelector("#error-msg"),
        validMsg = document.querySelector("#valid-msg");

    var errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

    $("#Mobile").intlTelInput({
        initialCountry: "IN"
    });

    var reset = function () {
        input.classList.remove("error");
        errorMsg.innerHTML = "";
        errorMsg.classList.add("hide");
        validMsg.classList.add("hide");
    };

    // Validate on blur event
    input.addEventListener('blur', function () {
        reset();
        if (input.value.trim()) {
            if (intl.isValidNumber()) {
                validMsg.classList.remove("hide");
            } else {
                input.classList.add("error");
                var errorCode = intl.getValidationError();
                errorMsg.innerHTML = errorMap[errorCode];
                errorMsg.classList.remove("hide");
            }
        }
    });

    // Reset on keyup/change event
    input.addEventListener('change', reset);
    input.addEventListener('keyup', reset);

</script>




